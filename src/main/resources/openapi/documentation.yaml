openapi: "3.1.0"
info:
  title: "SwiftGift API"
  description: "The API of SwiftGift. In order to authorize, go to https://api.swiftgift.no/ and login. You will then be redirected to https://api.swiftgift.no/token. Use that token to authorize in this spec."
  version: "1.0.0"
servers:
- url: "https://api.swiftgift.no"

security:
  - bearerAuth: []

paths:
  /:
    get:
      description: "The API landing page with login options"
      security: []
      responses:
        "200":
          description: "OK"
          content:
            text/html:
              type: object
              examples:
                text/html:
                  description: "Landing page with google login"
                  value: |
                    <!DOCTYPE html>
                    <html>
                    <head>
                        <style>
                            body {
                                display: flex;
                                justify-content: center;
                                align-items: center;
                                height: 100vh;
                                margin: 0;
                                background-color: rgb(23, 25, 31);
                                font-family: Arial, sans-serif;
                            }
                            .login-container {
                                background: white;
                                padding: 2rem;
                                border-radius: 8px;
                                background-color: rgb(16, 18, 22);
                                box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
                            }
                            .login-button {
                                display: flex;
                                align-items: center;
                                flex-direction: row;
                                justify-content: center;
                                gap: 1rem;
                                padding: 1rem 4rem;
                                font-size: 1.1rem;
                                color: black;
                                background-color: rgb(255, 255, 255);
                                border: none;
                                border-radius: 4px;
                                text-decoration: none;
                                cursor: pointer;
                            }
                            .login-button:hover {
                                background-color: rgb(207, 208, 208);
                            }
                            img {
                                width: 28px;
                                height: 28px;
                                margin-left: -2.9rem;
                                margin-right: 2rem;
                            }
                        </style>
                    </head>
                    <body>
                        <div class="login-container">
                            <p>
                                <a href="/login" class="login-button">
                                    <img src="https://upload.wikimedia.org/wikipedia/commons/c/c1/Google_%22G%22_logo.svg" alt="Google logo">
                                    Sign in with Google
                                </a>
                            </p>
                        </div>
                    </body>
                    </html>
  /me:
    get:
      description: "Retrieves the user object of the logged in user"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
        "404":
          description: "No logged in user found"
          content:
            '*/*':
              schema:
                type: object
    put:
      description: "Update the currently logged in user"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PartialUser"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: "User could not be found"
          content:
            '*/*':
              schema:
                type: object

  /groups:
    get:
      description: "Retrieves all groups that (a) is public, (b) is created by user, or (c) the user is a member of."
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Group"
    post:
      description: "Creates a new group"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PartialGroup"
        required: true
      responses:
        "401":
          description: "User cannot be determined"
          content:
            '*/*':
              schema:
                type: object
        "400":
          description: "Partial group is invalid. Will return appropriate validation error."
          content:
            '*/*':
              schema:
                type: string
        "201":
          description: "Group is successfully created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Group"
  /groups/{groupId}:
    delete:
      description: "Deletes the group"
      parameters:
      - name: "groupId"
        in: "path"
        required: true
        schema:
          type: string
      responses:
        "404":
          description: "Group could not be found for user"
          content:
            '*/*':
              schema:
                type: object
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: object
        "304":
          description: "Group could not be successfully deleted. Some data related to the group might still be deleted."
          content:
            '*/*':
              schema:
                type: object
        "401":
          description: "User is not the owner of the group"
          content:
            '*/*':
              schema:
                type: string
              examples:
                User is not owner of group:
                  value: "Only group owners can delete a group"
    get:
      description: "Retrieves the group"
      parameters:
      - name: "groupId"
        in: "path"
        required: true
        schema:
          type: string
      responses:
        "404":
          description: "Group could not be found, or user does not have read access"
          content:
            '*/*':
              schema:
                type: object
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Group"
    patch:
      description: "Updates the group"
      parameters:
      - name: "groupId"
        in: "path"
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PartialGroup"
        required: true
      responses:
        "404":
          description: "Group is not found for user"
          content:
            '*/*':
              schema:
                type: object
        "400":
          description: "The request body does not contain a valid PartialGroup"
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Group"
  /groups/{groupId}/invite:
    post:
      description: "Creates an invite for the group. The invite must be handled by initiating party."
      parameters:
      - name: "groupId"
        in: "path"
        required: true
        schema:
          type: string
      responses:
        "404":
          description: "Group is not found for user"
          content:
            '*/*':
              schema:
                type: object
        "201":
          description: "Invite is successfully created"
          content:
            '*/*':
              schema:
                type: string
  /groups/{groupId}/members:
    get:
      description: "Retrieves all members of group"
      parameters:
      - name: "groupId"
        in: "path"
        required: true
        schema:
          type: string
      responses:
        "404":
          description: "Group is not found for user"
          content:
            '*/*':
              schema:
                type: object
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
  /groups/{groupId}/members/{memberId}:
    delete:
      description: "Removes the membership of the member from the group"
      parameters:
      - name: "groupId"
        in: "path"
        required: true
        schema:
          type: string
      - name: "memberId"
        in: "path"
        required: true
        schema:
          type: string
      responses:
        "404":
          description: "Group, member or membership is not found"
          content:
            '*/*':
              schema:
                type: object
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: object
        "206":
          description: "Only some of the memberships of the member could be deleted"
          content:
            '*/*':
              schema:
                type: object
    get:
      description: "Retrieves the group membership for the member"
      parameters:
      - name: "groupId"
        in: "path"
        required: true
        schema:
          type: string
      - name: "memberId"
        in: "path"
        required: true
        schema:
          type: string
      responses:
        "404":
          description: "Group, member or membership is not found"
          content:
            '*/*':
              schema:
                type: object
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/GroupMembership"
    post:
      description: "Adds the user as a member to the group"
      parameters:
      - name: "groupId"
        in: "path"
        required: true
        schema:
          type: string
      - name: "memberId"
        in: "path"
        required: true
        schema:
          type: string
      responses:
        "400":
          description: "User ID missing"
          content:
            '*/*':
              schema:
                type: string
              examples:
                Member ID missing:
                  value: "Missing member ID"
        "404":
          description: "Group or user could not be found"
          content:
            '*/*':
              schema:
                type: object
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/GroupMembership"
  /groups/{groupId}/members/{memberId}/wishes:
    get:
      description: "Retrieved wishes made public to a given group by a given member"
      parameters:
        - name: "groupId"
          in: "path"
          required: true
          schema:
            type: string
        - name: "memberId"
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Wish"
  /groups/{groupId}/members/admins:
    get:
      description: "Retrieves all members with administrator privileges for the group"
      parameters:
      - name: "groupId"
        in: "path"
        required: true
        schema:
          type: string
      responses:
        "404":
          description: "Group could not be found for user"
          content:
            '*/*':
              schema:
                type: object
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
  /groups/{groupId}/members/admins/{memberId}:
    delete:
      description: "Remove member as an admin of the group"
      parameters:
      - name: "groupId"
        in: "path"
        required: true
        schema:
          type: string
      - name: "memberId"
        in: "path"
        required: true
        schema:
          type: string
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: string
              examples:
                Missing member ID:
                  value: "Missing member ID"
        "404":
          description: "Group could not be found for user"
          content:
            '*/*':
              schema:
                type: object
        "405":
          description: "The member is the owner of the group"
          content:
            '*/*':
              schema:
                type: string
              examples:
                Member is owner:
                  value: "Cannot change role of owner"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/GroupMembership"
    get:
      description: "Retrieves the membership detail of the admin"
      parameters:
      - name: "groupId"
        in: "path"
        required: true
        schema:
          type: string
      - name: "adminId"
        in: "path"
        required: true
        schema:
          type: string
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: string
              examples:
                Admin ID missing:
                  value: "Missing admin ID"
        "404":
          description: "Group could not be found for user, or user is not admin of the group"
          content:
            '*/*':
              schema:
                type: object
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/GroupMembership"
    post:
      description: "Makes the user an admin of the group"
      parameters:
      - name: "groupId"
        in: "path"
        required: true
        schema:
          type: string
      - name: "memberId"
        in: "path"
        required: true
        schema:
          type: string
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: string
              examples:
                Missing member ID:
                  value: "Missing member ID"
        "404":
          description: "Group could not be found for user, or user is not admin of the group"
          content:
            '*/*':
              schema:
                type: object
        "405":
          description: "Method Not Allowed"
          content:
            '*/*':
              schema:
                type: string
              examples:
                User is owner:
                  value: "Cannot change role of owner"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/GroupMembership"

  /groups/{groupId}/wishes:
    get:
      description: "Retrieves all wishes the user has access to through the group membership."
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Wish"
    post:
      description: "Creates a new wish for the user and group"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PartialWishForGroup"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Wish"
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: object

  /token:
    get:
      description: ""
      responses:
        "401":
          description: "User is not logged in"
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: "The bearer token"
          content:
            text/plain:
              schema:
                type: string
              examples:
                Example token:
                  value: "ya29.a0AcM612wPskMEKLkLGXQbZRiH9iRDOARWXgjarCtI1_e7-rCY-kkmLIZA3PRyQx8NS5mEmrcpOnUOaHjCkCHIN0IT0QfXWU7EQn-CGwMZyRQS3f2rJvx6FlKWrDIOL1vfVScFIoEDau-JUJL_eeuzhSMPgA7JPs0jDpVIaCgYKAS4SARESFQHGC6MilFzG-JsGTtQgtRCmQPIigQ0171"
  /users:
    get:
      description: "Retrieves al public users. A user is considered public if it has a first- or last name set."
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: "User could not be found"
          content:
            '*/*':
              schema:
                type: object
  /users/{userId}:
    get:
      description: "Retrieves the user"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: "User could not be found for user"
          content:
            '*/*':
              schema:
                type: object

  /users/{userId}/wishes:
    get:
      description: "Retrieves all wishes that is created by user."
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Wish"

  /users/{userId}/groups:
    get:
      description: "Retrieves all groups that user is affiliated with."
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Group"
  /wishes:
    get:
      description: "Retrieves all wishes that (a) is public, (b) is created by user, or (c) the user has access to through a group membership."
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Wish"
    post:
      description: "Creates a new wish for the user"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PartialWish"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Wish"
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: object
  /wishes/{id}:
    delete:
      description: "Deletes the wish"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: string
      responses:
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: object
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: object
        "200":
          description: "The number of wishes deleted"
          content:
            '*/*':
              schema:
                type: "integer"
                format: "int32"
    get:
      description: "Retrieves the wish for the user"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Wish"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: object
    patch:
      description: "Updates the wish"
      parameters:
      - name: "id"
        in: "path"
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PartialWish"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Wish"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: object
  /wishes/occasion:
    get:
      security: []
      description: "Retrieves the valid occasions for a wish"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  type: string
  /wishes/status:
    get:
      security: []
      description: "Retrieves all valid status for a wish"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  type: string
  /app/login/google:
    post:
      description: "After the user has logged in through the app via Google, this endpoint is used add the user to the API."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GoogleAppUser"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/User"
  /app/login/email:
    post:
      description: "Entry point for logging in with email. If code is present in body, then will try to authenticate with OTP. Otherwise, will initiate OTP."
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailLogin"
        required: true
      responses:
        "200":
          description: "Will contain user if code is present in request. Otherwise, will respond 'OTP sent'."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserAndSession"
        '400':
          description: Bad Request, e.g., too many OTP attempts.
          content:
            text/plain:
              example: "Too many attempts"

        '401':
          description: Unauthorized, invalid OTP.
        '500':
          description: Internal Server Error, e.g., user exists but no valid token found.
          content:
            text/plain:
              example: "User exists, but no valid token found for user"

  /confirmInvite/{inviteId}:
    get:
      description: "The link the user presses to confirm the invite"
      parameters:
      - name: "inviteId"
        in: "path"
        required: true
        schema:
          type: string
      responses:
        "302":
          description: "Redirect to login"
          content:
            text/plain:
              schema:
                type: string

  /login:
    get:
      description: "Redirect google login"

  /images:
    post:
      description: "Uploads a new image"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: "binary"
        required: true
      responses:
        "201":
          description: "Returns image ID"
          content:
            text/plain:
              schema:
                type: string
        "400":
          description: "Bad request, possibly due to missing image file"
          content:
            text/plain:
              schema:
                type: string
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: string

  /images/{id}:
    get:
      description: "Retrieves an image by ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "OK"
          content:
            application/octet-stream:
              schema:
                type: string
                format: "binary"
        "404":
          description: "Image not found"
          content:
            text/plain:
              schema:
                type: string

    delete:
      description: "Deletes an image by ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Rows deleted"
          content:
            '*/*':
              schema:
                type: "integer"
                format: "int32"
        "404":
          description: "Image not found"
          content:
            text/plain:
              schema:
                type: string

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: "uuid"
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
      required:
      - "id"
      - "email"
    UserSession:
      type: object
      properties:
        status:
          type: string
          example: authenticated
          description: Status of the session, e.g., "authenticated".
        authToken:
          type: string
          description: Authentication token for the session.
    UserAndSession:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/User"
        session:
          $ref: "#/components/schemas/UserSession"
      required:
        - user
        - session

    Group:
      type: object
      properties:
        id:
          type: string
          format: "uuid"
        name:
          type: string
        createdBy:
          $ref: "#/components/schemas/User"
        visibility:
          type: string
          enum:
          - "PRIVATE"
          - "PUBLIC"
          - "COMPLETED"
      required:
      - "id"
      - "name"
      - "createdBy"
      - "visibility"
    PartialGroup:
      type: object
      properties:
        name:
          type: string
        visibility:
          type: string
    GroupMembership:
      type: object
      properties:
        id:
          type: string
          format: "uuid"
        groupId:
          type: string
          format: "uuid"
        userId:
          type: string
          format: "uuid"
        role:
          type: string
          enum:
          - "OWNER"
          - "ADMIN"
          - "MODERATOR"
          - "MEMBER"
      required:
      - "id"
      - "groupId"
      - "userId"
      - "role"
    URLProtocol:
      type: object
      properties:
        name:
          type: string
        defaultPort:
          type: "integer"
          format: "int32"
      required:
      - "name"
    Parameters:
      type: object
      properties: {}
    Url:
      type: object
      properties:
        protocol:
          $ref: "#/components/schemas/URLProtocol"
        host:
          type: string
        specifiedPort:
          type: "integer"
          format: "int32"
        pathSegments:
          type: "array"
          items:
            type: string
        parameters:
          $ref: "#/components/schemas/Parameters"
        fragment:
          type: string
        user:
          type: string
        password:
          type: string
        trailingQuery:
          type: "boolean"
      required:
      - "protocol"
      - "host"
      - "pathSegments"
      - "parameters"
      - "fragment"
    Wish:
      type: object
      properties:
        id:
          type: string
          format: "uuid"
        userId:
          type: string
          format: "uuid"
        occasion:
          type: string
          enum:
          - "BIRTHDAY"
          - "CHRISTMAS"
          - "WEDDING"
          - "GRADUATION"
          - "NONE"
        status:
          type: string
          enum:
          - "OPEN"
          - "SELECTED"
          - "FULFILLED"
          - "DELETED"
        url:
          type: string
        description:
          type: string
        title:
          type: string
        img:
          type: string
        visibility:
          type: string
          enum:
          - "PRIVATE"
          - "PUBLIC"
          - "GROUP"
      required:
      - "id"
      - "userId"
      - "occasion"
      - "status"
      - "visibility"
      - "title"
    PartialWish:
      type: object
      properties:
        occasion:
          type: string
        url:
          type: string
        title:
          type: string
        description:
          type: string
        status:
          type: string
        img:
          type: string
        visibility:
          type: string
        groupId:
          type: string
      required:
        - title
    PartialWishForGroup:
      type: object
      properties:
        occasion:
          type: string
        url:
          type: string
        title:
          type: string
        description:
          type: string
        status:
          type: string
        img:
          type: string
      required:
        - title
    GoogleAppUser:
      type: object
      properties:
        id:
          type: string
        displayName:
          type: string
        email:
          type: string
        photoUrl:
          type: string
        serverAuthCode:
          type: string
        accessToken:
          type: string
      required:
      - "id"
      - "displayName"
      - "email"
      - "photoUrl"
      - "accessToken"
    EmailLogin:
      type: object
      properties:
        email:
          type: string
          format: email
        code:
          type: integer
          format: int32
      required:
        - email
    PartialUser:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer